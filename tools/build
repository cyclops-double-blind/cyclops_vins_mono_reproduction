#!/bin/bash
set -e  # Exit immediately if a command exits with a non-zero status.

current_script=$(realpath "$BASH_SOURCE")
base_directory=$(realpath $(dirname "${current_script}")/..)

function should_rebuild_target() {
  local target=$1

  local dockerfile=$2
  local current_build_script=$3

  local source_directories=("${@:4}")

  if [[ ! -f "$target" ]]; then
    return 0
  fi
  if [[ "$dockerfile" -nt "$target" ]]; then
    return 0
  fi
  if [[ "$current_build_script" -nt "$target" ]]; then
    return 0
  fi

  for source_directory in "${source_directories[@]}"; do
    if [[ -d "$source_directory" ]]; then
      local updated_files=$(find "$source_directory" -type f -newer "$target")

      if [[ -n "$updated_files" ]]; then
        return 0
      fi
    fi
  done

  return 1
}

function build_container_if_needed() {
  local current_build_script=$1
  local container_name=$2

  local dockerfile=$3
  local buildstamp=$4

  local source_directories=("${@:5}")

  if should_rebuild_target "$buildstamp" \
      "$dockerfile" "$current_build_script" "${source_directories[@]}"; then
    echo "Build container needs to be rebuilt. Starting build..."
    docker build $base_directory -f $dockerfile --tag $container_name

    mkdir -p $(dirname "$buildstamp")
    touch "$buildstamp"
  else
    echo "Build container is up-to-date. Skipping rebuild."
  fi
}

function build_ceres() {
  build_container_if_needed $current_script vinsmono-docker-deps \
    $base_directory/Dockerfile.deps $base_directory/.container.stamp.deps

  mkdir -p ${base_directory}/3rd/build/ceres
  mkdir -p ${base_directory}/3rd/install/ceres

  local ceres_cmake_dir="$base_directory/3rd/install/ceres/lib/cmake"
  local ceres_buildstamp="$ceres_cmake_dir/Ceres/CeresTargets-release.cmake"

  if should_rebuild_target "$ceres_buildstamp" \
      "$base_directory/Dockerfile.deps" "$current_script" \
      "$base_directory/3rd/ceres-solver"; then
    docker run --rm -i \
      -v $base_directory/3rd/ceres-solver:/ceres-solver \
      -v $base_directory/3rd/build/ceres:/build \
      -v $base_directory/3rd/install/ceres:/usr/local \
      vinsmono-docker-deps \
      bash -c "\
        groupmod -g "$(id -g)" builder
        usermod -u "$(id -u)" -g "$(id -g)" -o builder

        exec gosu builder bash -c ' \
          cmake -H/ceres-solver -B/build \
            -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF -DBUILD_BENCHMARKS=OFF \
            -DSCHUR_SPECIALIZATIONS=ON \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local \
          && cmake --build /build --target install -- -j8'"
  else
    echo "$ceres_buildstamp is up to date. Nothing to be done."
  fi
}

function build_catkin_workspace() {
  build_container_if_needed $current_script vinsmono-docker-catkin \
    $base_directory/Dockerfile.catkin \
    $base_directory/.container.stamp.catkin

  docker run --rm -i \
    -v ${base_directory}/3rd/install/ceres:/usr/local \
    -v ${base_directory}/catkin:${base_directory}/catkin \
    -w ${base_directory}/catkin \
    vinsmono-docker-catkin \
    bash -c "\
      groupmod -g "$(id -g)" builder
      usermod -u "$(id -u)" -g "$(id -g)" -o builder

      exec gosu builder bash -c ' \
        catkin_make \
        -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=yes install'"
}

build_ceres
build_catkin_workspace

build_container_if_needed $current_script vinsmono-docker \
  $base_directory/Dockerfile.app \
  $base_directory/.container.stamp.app \
  $base_directory/catkin/install $base_directory/etc
