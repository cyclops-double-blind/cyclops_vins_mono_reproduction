#!/bin/bash
## Filename: utils.sh
base_directory=$(realpath $(dirname "$BASH_SOURCE")/..)

function should_rebuild_target() {
  local target=$1

  local dockerfile=$2
  local current_build_script=$3
  local source_directory=$4

  local this_script=$(realpath "$BASH_SOURCE")

  if [[ ! -f "$target" ]]; then
    return 0
  fi
  if [[ "$dockerfile" -nt "$target" ]]; then
    return 0
  fi
  if [[ "$this_script" -nt "$target" ]]; then
    return 0
  fi
  if [[ "$current_build_script" -nt "$target" ]]; then
    return 0
  fi

  if [[ -d "$source_directory" ]]; then
    local updated_files=$(find "$source_directory" -type f -newer "$target")

    if [[ -n "$updated_files" ]]; then
      return 0
    fi
  fi

  return 1
}

function build_container_if_needed() {
  local current_build_script=$1
  local container_name=$2

  local dockerfile=$3
  local buildstamp=$4

  local watch_directory=$5

  if should_rebuild_target "$buildstamp" \
      "$dockerfile" "$current_build_script" "$watch_directory"; then
    echo "Build container needs to be rebuilt. Starting build..."
    docker build $base_directory -f $dockerfile --tag $container_name

    mkdir -p $(dirname "$buildstamp")
    touch "$buildstamp"
  else
    echo "Build container is up-to-date. Skipping rebuild."
  fi
}
